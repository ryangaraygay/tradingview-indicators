//@version=5
indicator(title="Inverse Choppiness Index", shorttitle="TREND", format=format.price, precision=2, overlay = true)

length = input.int(14, minval=1)
ci = 100 * math.log10(math.sum(ta.atr(1), length) / (ta.highest(length) - ta.lowest(length))) / math.log10(length)
inverse_ci = (ci * -1) + 50
offset = input.int(0, "Offset",  minval = -500, maxval = 500)

var color_veryhigh = input.color(color.new(color.black, 30), "very high")
var color_high = input.color(color.new(color.gray, 30), "high")
var color_low = input.color(color.new(color.blue, 30), "low")
var color_verylow = input.color(color.new(color.green, 30), "very low")

color_ci = ci > 61.8 ? color_veryhigh: (ci > 50 ? color_high : (ci > 38.2 ? color_low : color_verylow))

// plot(inverse_ci, "CHOP", color=color_ci, offset = offset, style = plot.style_columns)
// bgcolor(inverse_ci < 0 ? color.new(color.gray, 90) : color.white)

// Define the coordinates for the rectangle
var int x1 = na
var float y1 = na
var int x2 = na
var float y2 = na

// Coordinates for the rectangle (these could be based on your logic)
x1 := bar_index[length] // starting x-coordinate
y1 := ta.highest(length) // starting y-coordinate
x2 := bar_index // ending x-coordinate
y2 := ta.lowest(length) // ending y-coordinate

// Create a filled rectangle
var box rect = na

string my_session = input.session("0830-1500", title='NYSession')
timeinrange(res, sess) => not na(time(res, sess)) ? true : false
in_session = timeinrange(timeframe.period, my_session)


// Create new filled rectangle
// if inverse_ci < 0
if ci > 50 and in_session
    // if (na(rect) == false)
    //     box.delete(rect)
    rect := box.new(left=x1, top=y1, right=x2, bottom=y2, border_width=0, bgcolor=color.new(color.gray, 95))
