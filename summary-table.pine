// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© swoozshies

//@version=5
indicator("SUMMARY", overlay = true)

atr_length = input.int(14, "ATR Length")

var string GP2 = "Display"
string  tableYposInput = input.string("top", "Panel position", inline = "11", options = ["top", "middle", "bottom"], group = GP2)
string  tableXposInput = input.string("right", "", inline = "11", options = ["left", "center", "right"], group = GP2)
var table panel = table.new(tableYposInput + "_" + tableXposInput, 2, 12, border_color = color.new(color.gray, 80), border_width = 1)

atr = ta.atr(atr_length)

// below or above custom VWAP - unfortunately best way to recalculate
float source = input.source(hlc3, "Source", tooltip="", inline="", group="Volume Weighted Average Price")
string my_session = input.session("0830-1600", title='Custom Session')
timeinrange(res, sess) => not na(time(res, sess)) ? 1 : 0
in_session = timeinrange("1", my_session)
newYorkVwap = ta.vwap(source, in_session[0] and not in_session[1])
vwapValue = in_session ? newYorkVwap  : na

// price-volume
bv = (close-open) * volume // body x volume
bv_length = 21 // TODO input
bvema1 = ta.ema(bv, bv_length)
bvema2 = ta.ema(bvema1, bv_length)
bvema3 = ta.ema(bvema2, bv_length)
bvout = 3 * (bvema1 - bvema2) + bvema3

b = math.abs(bvout)
b2 = math.abs(bvout[1])
b3 = math.abs(bvout[2])

messy = 1500 // TODO input messy
isMessy = b < messy and b2 < messy and b3 < messy

pricevolume_color = bvout > 0 ? color.green : color.red

// ema-band
ema9 = ta.ema(close, 9)
ema21 = ta.ema(close, 21)

// donchian
length = input(20, title="Channel Length")
lower_tf = input.timeframe("1", title="Lower Timeframe")

[lower_tf_upper, lower_tf_lower] = request.security(syminfo.tickerid, lower_tf, [ta.highest(high, length), ta.lowest(low, length)])

var string lastSignalType = ""
if (lower_tf_upper > lower_tf_upper[1])
    lastSignalType := "long"
else if (lower_tf_lower < lower_tf_lower[1])
    lastSignalType := "short"

vwap_diff = close - vwapValue
vwap_score = na(vwap_diff) ? 0 : (vwap_diff > 0 ? 1 : -1)
vwap_color = vwap_score == 0 ? color.black : (vwap_score > 0 ? color.green : color.red)

emaband_diff = ema9 - ema21
emaband_score = emaband_diff > 0 ? 1 : -1
emaband_color = emaband_score == 1 ? color.green : color.red

pricevolume_score = (isMessy or bvout ==0) ? 0 :(bvout > 0 ? 1 : -1)

// donchian relative position and score
A = lower_tf_lower
B = lower_tf_upper
C = close
rng = B - A
relative_position = (C - A) / rng
percentage = relative_position * 100
donchian_diff = percentage
donchian_score = (lastSignalType == "long" ? 1 : -1)
donchian_color = donchian_score == 1 ? color.green : color.red

trend_score = vwap_score + emaband_score + pricevolume_score + donchian_score
trend_color = trend_score == 0 ? color.black : trend_score > 0 ? color.from_gradient(trend_score, 0, 4, color.white, color.green) : color.from_gradient(trend_score, -4, 0, color.red, color.white)
trend_text = (trend_score == 0 ? "" : (trend_score > 0 ? "+" : "-")) + str.tostring(math.abs(trend_score), "#")

// current_time = str.format("{0,date,yyyy-MM-dd HH:mm:ss}", time)

if barstate.isconfirmed
    table.cell(panel, 0, 0, "trend", text_size = size.normal, text_color = trend_color, text_halign = text.align_right)
    table.cell(panel, 1, 0, trend_text, text_color = trend_color, text_size = size.huge)
    table.cell(panel, 0, 1, "price-volume", text_size = size.small, text_color = pricevolume_color, text_halign = text.align_right)
    table.cell(panel, 1, 1, str.tostring(bvout, "####"), text_size = size.small, text_color = pricevolume_color)
    table.cell(panel, 0, 2, "donchian %", text_size = size.small, text_color = donchian_color, text_halign = text.align_right)
    table.cell(panel, 1, 2, str.tostring(donchian_diff, "#"), text_size = size.small, text_color = donchian_color)
    table.cell(panel, 0, 3, "vwap diff", text_size = size.small, text_color = vwap_color, text_halign = text.align_right)
    table.cell(panel, 1, 3, str.tostring(vwap_diff, "#0"), text_size = size.small, text_color = vwap_color)
    table.cell(panel, 0, 4, "ema diff", text_size = size.small, text_color = emaband_color, text_halign = text.align_right)
    table.cell(panel, 1, 4, str.tostring(emaband_diff, "#0"), text_size = size.small, text_color = emaband_color)
    table.cell(panel, 0, 5, "atr", text_size = size.normal, text_halign = text.align_right)
    table.cell(panel, 1, 5, str.tostring(atr, "#0.00"), text_color = color.black, text_size = size.large)

trend_changed = trend_score != trend_score[1]
alertcondition(barstate.isconfirmed and trend_changed, "Trend Change alert", "A change in cumulative trend has been detected.")